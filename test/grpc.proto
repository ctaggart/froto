syntax = "proto3";

package google.pubsub.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "PubsubProto";
option java_package = "com.google.pubsub.v1";

option go_package = "google.golang.org/genproto/googleapis/pubsub/v1";

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the `Pull` method.
service Subscriber {
  // Creates a subscription to a given topic for a given subscriber.
  // If the subscription already exists, returns `ALREADY_EXISTS`.
  // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
  //
  // If the name is not provided in the request, the server will assign a random
  // name for this subscription on the same project as the topic.
  rpc CreateSubscription(Subscription) returns (Subscription) {
    option (google.api.http) = { put: "/v1/{name=projects/*/subscriptions/*}" body: "*" };
  }

  // Gets the configuration details of a subscription.
  rpc GetSubscription(GetSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = { get: "/v1/{subscription=projects/*/subscriptions/*}" };
  }

  // Lists matching subscriptions.
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse) {
    option (google.api.http) = { get: "/v1/{project=projects/*}/subscriptions" };
  }

  // Deletes an existing subscription. All pending messages in the subscription
  // are immediately dropped. Calls to `Pull` after deletion will return
  // `NOT_FOUND`. After a subscription is deleted, a new one may be created with
  // the same name, but the new one has no association with the old
  // subscription, or its topic unless the same topic is specified.
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{subscription=projects/*/subscriptions/*}" };
  }

  // Modifies the ack deadline for a specific message. This method is useful
  // to indicate that more time is needed to process a message by the
  // subscriber, or to make the message available for redelivery if the
  // processing was interrupted.
  rpc ModifyAckDeadline(ModifyAckDeadlineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/{subscription=projects/*/subscriptions/*}:modifyAckDeadline" body: "*" };
  }

  // Acknowledges the messages associated with the `ack_ids` in the
  // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
  // from the subscription.
  //
  // Acknowledging a message whose ack deadline has expired may succeed,
  // but such a message may be redelivered later. Acknowledging a message more
  // than once will not result in an error.
  rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/{subscription=projects/*/subscriptions/*}:acknowledge" body: "*" };
  }

  // Pulls messages from the server. Returns an empty list if there are no
  // messages available in the backlog. The server may return `UNAVAILABLE` if
  // there are too many concurrent pull requests pending for the given
  // subscription.
  rpc Pull(PullRequest) returns (PullResponse) {
    option (google.api.http) = { post: "/v1/{subscription=projects/*/subscriptions/*}:pull" body: "*" };
  }

  // Modifies the `PushConfig` for a specified subscription.
  //
  // This may be used to change a push subscription to a pull one (signified by
  // an empty `PushConfig`) or vice versa, or change the endpoint URL and other
  // attributes of a push subscription. Messages will accumulate for delivery
  // continuously through the call regardless of changes to the `PushConfig`.
  rpc ModifyPushConfig(ModifyPushConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/{subscription=projects/*/subscriptions/*}:modifyPushConfig" body: "*" };
  }
}